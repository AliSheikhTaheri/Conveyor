@{
    Layout = "_Layout.cshtml";
}

@section PageHeader
{
    <script src="//ajax.googleapis.com/ajax/libs/jquery/1/jquery.min.js" type="text/javascript"></script>
    <script src="//ajax.googleapis.com/ajax/libs/jqueryui/1/jquery-ui.min.js" type="text/javascript"></script>

    <link href="/App_Plugins/BackOffice/ContentConveyor/Style/FancyTree/skin-win7/ui.fancytree.css" rel="stylesheet" type="text/css">
    <script src="/App_Plugins/BackOffice/ContentConveyor/Style/FancyTree/jquery.fancytree.js" type="text/javascript"></script>

    <style>
        ul.fancytree-container {
            border: none;
        }

        .fancytree-selected .fancytree-title {
            font-style: normal;
        }

        .dashboardWrapper h2 {
            padding-left: 5px;
        }
    </style>

    <script type="text/javascript">


        $(function () {

            var requestUrl = '@Url.Action("ContentTreeAsJsonResult", "ContentConveyor")' + '/';

            $.getJSON(requestUrl, function (json) {
                myfunction(json);
            });

            function myfunction(jsondata) {

                var tree = $('#tree');

                tree.fancytree({
                    //      extensions: ["select"],
                    checkbox: true,
                    selectMode: 2,
                    source: jsondata,
                    debugLevel: 0,
                    lazyLoad: function (event, ctx) {

                        console.log('ctx=' + ctx);
                        console.log('this=' + this);
                        console.log('event=' + event);

                        ctx.result = { url: requestUrl + ctx.node.key, debugDelay: 0 };
                    },
                    select: function (event, data) {
                        // Display list of selected nodes
                        var selNodes = data.tree.getSelectedNodes();
                        // convert to title/key array
                        var selKeys = $.map(selNodes, function (node) {
                            return node.key;
                        });
                        $("#echoSelection").text('Selected node(s) : ' + selKeys.length);

                        var selectedIds = selKeys.join(",");

                        $("input[name='ids']").val(selectedIds);
                    },
                    click: function (event, data) {
                        // We should not toggle, if target was "checkbox", because this
                        // would result in double-toggle (i.e. no toggle)
                        if ($.ui.fancytree.getEventTargetType(event) === "title") {
                            data.node.toggleSelected();
                        }
                    },
                    keydown: function (event, data) {
                        if (event.which === 32) {
                            data.node.toggleSelected();
                            return false;
                        }
                    },
                    // The following options are only required, if we have more than one tree on one page:
                    cookieId: "fancytree-Cb2",
                    idPrefix: "fancytree-Cb2-"
                });

                $("#btnToggleSelect").click(function () {
                    tree.fancytree("getRootNode").visit(function (node) {
                        node.toggleSelected();
                    });
                    return false;
                });
                $("#btnDeselectAll").click(function () {
                    tree.fancytree("getTree").visit(function (node) {
                        node.setSelected(false);
                    });
                    return false;
                });
                $("#btnSelectAll").click(function () {
                    tree.fancytree("getTree").visit(function (node) {
                        node.setSelected(true);
                    });
                    return false;
                });

                $('#btnSelectChildren').click(function () {

                    var node = tree.fancytree("getActiveNode");
                    if (node) {
                        if (node.hasChildren()) {

                            node.setExpanded(true);

                            node.children.forEach(function (n) {
                                n.setSelected(true);
                            });
                        }
                    } else {
                        alert("No active node.");
                    }

                });
            };

        });
    </script>

}
<div class="boxbody">

    <div id="body_UmbracoPanel_content" class="content">
        <div class="innerContent" id="body_UmbracoPanel_innerContent">
            <div class="dashboardWrapper">
                <div class="propertypane">

                    <div class="propertypane">
                        <h2>Export</h2>

                        @using (Html.BeginForm("ExportContent", "ContentConveyor"))
                        {
                            if (Html.ValidationMessage("exportError") != null)
                            {
                                <div class="error">
                                    <h3>@Html.ValidationMessage("exportError")</h3>
                                </div>
                            }
                            <br />
                            <div class="propertyItem">
                                <div class="propertyItemheader">File name</div>
                                <div class="propertyItemContent">
                                    <input type="text" name="fileName" id="fileName" class="umbEditorTextField" />
                                </div>
                            </div>
                            <div class="propertyPaneFooter">-</div>

                            <div class="propertyItem">
                                <div class="propertyItemheader">Select content</div>
                                <div class="propertyItemContent">
                                    <a href="#" id="btnSelectAll">Select all</a> |
                                    <a href="#" id="btnDeselectAll">Deselect all</a> |
                                    <a href="#" id="btnToggleSelect">Toggle select</a> |
                                    <a href="#" id="btnSelectChildren">Select children</a>
                                    <div id="tree"></div>
                                </div>
                            </div>
                            <div class="propertyPaneFooter">-</div>

                            <div class="propertyItem">
                                <div class="propertyItemheader"></div>
                                <div class="propertyItemContent">
                                    <input type="hidden" name="ids" id="ids" />
                                    <input type="submit" value="Export content" />
                                    <span id="echoSelection"></span>
                                </div>
                            </div>
                            <div class="propertyPaneFooter">-</div>

                        }

                    </div>

                    <div class="propertypane">
                        <h2>Import</h2>

                        @using (Html.BeginForm("ImportContent", "ContentConveyor", FormMethod.Post, new { enctype = "multipart/form-data" }))
                        {
                            if (Html.ValidationMessage("importError") != null)
                            {
                                <div class="error">
                                    <h3>@Html.ValidationMessage("importError")</h3>
                                </div>
                            }
                            <br />

                            <div class="propertyItem">
                                <div class="propertyItemheader">Select import option</div>
                                <div class="propertyItemContent">
                                    <select name="publishTypes">
                                        <option value="unpublish">Un-publish all pages</option>
                                        <option value="sameAsOrigin">Same as origin</option>
                                        <option value="publish">Publish all pages</option>
                                    </select>
                                </div>
                            </div>

                            <div class="propertyItem">
                                <div class="propertyItemheader">Select a zip file to import</div>
                                <div class="propertyItemContent"><input type="file" name="file" id="file" /></div>
                            </div>

                            <div class="propertyItem">
                                <div class="propertyItemheader"></div>
                                <div class="propertyItemContent">
                                    <input type="submit" value="Import content" />
                                </div>
                            </div>

                            <div class="propertyPaneFooter">-</div>
                        }
                    </div>

                    <div class="propertypane">
                        <h2>Check compatibility</h2>
                        @using (Html.BeginForm("CheckCompatibility", "ContentConveyor"))
                        {
                            <div class="propertyItem">
                                <div class="propertyItemheader">Generate report</div>
                                <div class="propertyItemContent">
                                    <input type="submit" value="show results" />
                                </div>
                            </div>

                            <div class="propertyPaneFooter">-</div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
