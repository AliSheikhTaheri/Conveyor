<?xml version="1.0"?>
<doc>
    <assembly>
        <name>uComponents.XsltExtensions</name>
    </assembly>
    <members>
        <member name="T:uComponents.XsltExtensions.Cms">
            <summary>
            A helper class for the XSLT extensions.
            </summary>
            <summary>
            A helper class for getting CMS user data.
            </summary>
            <summary>
            The Cms class exposes XSLT extensions to access data from various parts of the Umbraco framework.
            </summary>
        </member>
        <member name="M:uComponents.XsltExtensions.Cms.AppendContentType(System.Xml.XmlDocument,System.String,umbraco.cms.businesslogic.ContentType,System.Boolean,System.Boolean)">
            <summary>
            Appends the type of the content.
            </summary>
            <param name="xd">The XML document.</param>
            <param name="elementName">Name of the element.</param>
            <param name="contentType">The content type.</param>
            <param name="includeTabs">if set to <c>true</c> [include tabs].</param>
            <param name="includePropertyTypes">if set to <c>true</c> [include property types].</param>
        </member>
        <member name="M:uComponents.XsltExtensions.Cms.AppendDocumentType(System.Xml.XmlDocument,umbraco.cms.businesslogic.web.DocumentType,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Appends the type of the document.
            </summary>
            <param name="xd">The XML document.</param>
            <param name="docType">The document type.</param>
            <param name="includeTabs">if set to <c>true</c> [include tabs].</param>
            <param name="includePropertyTypes">if set to <c>true</c> [include property types].</param>
            <param name="includeAllowedTemplates">if set to <c>true</c> [include allowed templates].</param>
        </member>
        <member name="M:uComponents.XsltExtensions.Cms.AppendMediaType(System.Xml.XmlDocument,umbraco.cms.businesslogic.media.MediaType,System.Boolean,System.Boolean)">
            <summary>
            Appends the type of the media.
            </summary>
            <param name="xd">The XML document.</param>
            <param name="mediaType">The media type.</param>
            <param name="includeTabs">if set to <c>true</c> [include tabs].</param>
            <param name="includePropertyTypes">if set to <c>true</c> [include property types].</param>
        </member>
        <member name="M:uComponents.XsltExtensions.Cms.AppendMemberType(System.Xml.XmlDocument,umbraco.cms.businesslogic.member.MemberType,System.Boolean,System.Boolean)">
            <summary>
            Appends the type of the member.
            </summary>
            <param name="xd">The XML document.</param>
            <param name="memberType">Type of the member.</param>
            <param name="includeTabs">if set to <c>true</c> [include tabs].</param>
            <param name="includePropertyTypes">if set to <c>true</c> [include property types].</param>
        </member>
        <member name="M:uComponents.XsltExtensions.Cms.AppendPropertyEditor(System.Xml.XmlDocument,umbraco.interfaces.IDataType)">
            <summary>
            Appends the property editor.
            </summary>
            <param name="xd">The XML document.</param>
            <param name="propertyEditor">The property editor.</param>
        </member>
        <member name="M:uComponents.XsltExtensions.Cms.GetAllTemplates">
            <summary>
            Gets all templates.
            </summary>
            <returns>Returns a list of templates.</returns>
            <remarks>
            This method checks if the template aliases are stored in memory.
            If so then a call to <c>umbraco.cms.businesslogic.templates.GetTemplate</c> will attempt to get the object from cache,
            rather than hit the database with <c>umbraco.cms.businesslogic.templates.GetAllAsList</c>.
            </remarks>
        </member>
        <member name="M:uComponents.XsltExtensions.Cms.GetAllUsers">
            <summary>
            Gets all users.
            </summary>
            <returns></returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Cms.GetAllUsersByEmail(System.String)">
            <summary>
            Gets all users by email.
            </summary>
            <param name="email">The email.</param>
            <returns></returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Cms.GetAllUsersByLoginName(System.String)">
            <summary>
            Gets the name of all users by login.
            </summary>
            <param name="loginName">Name of the login.</param>
            <returns></returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Cms.GetAllUsersByLoginName(System.String,System.Boolean)">
            <summary>
            Gets the name of all users by login.
            </summary>
            <param name="loginName">Name of the login.</param>
            <param name="partialMatch">if set to <c>true</c> [partial match].</param>
            <returns></returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Cms.GetUser(System.Int32)">
            <summary>
            Gets the user.
            </summary>
            <param name="userId">The user id.</param>
            <returns></returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Cms.GetUserEmail(System.Int32)">
            <summary>
            Gets the user email.
            </summary>
            <param name="userId">The user id.</param>
            <returns></returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Cms.GetUserLanguage(System.Int32)">
            <summary>
            Gets the user language.
            </summary>
            <param name="userId">The user id.</param>
            <returns></returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Cms.GetUserLoginName(System.Int32)">
            <summary>
            Gets the name of the user login.
            </summary>
            <param name="userId">The user id.</param>
            <returns></returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Cms.GetUserName(System.Int32)">
            <summary>
            Gets the name of the user.
            </summary>
            <param name="userId">The user id.</param>
            <returns></returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Cms.GetUserTypeAlias(System.Int32)">
            <summary>
            Gets the user type key.
            </summary>
            <param name="userId">The user id.</param>
            <returns></returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Cms.ConvertUsersToXml(umbraco.BusinessLogic.User[])">
            <summary>
            Converts the users to XML.
            </summary>
            <param name="users">The users.</param>
            <returns></returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Cms.AppendUser(System.Xml.XmlDocument,umbraco.BusinessLogic.User)">
            <summary>
            Appends the user to the XML document.
            </summary>
            <param name="xd">The XML document.</param>
            <param name="user">The user.</param>
        </member>
        <member name="M:uComponents.XsltExtensions.Cms.GetLanguages">
            <summary>
            Returns an XPathNodeIterator of all the languages created in Umbraco.
            </summary>
            <returns>A node-set of all the languages used within Umbraco</returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Cms.GetLanguage(System.Int32)">
            <summary>
            Gets the language by id.
            </summary>
            <param name="languageId">The language id.</param>
            <returns>A node-set of the specified language.</returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Cms.GetLanguageByCultureCode(System.String)">
            <summary>
            Gets the language by culture code.
            </summary>
            <param name="cultureCode">The culture code.</param>
            <returns>Returns a node-set of the specified language.</returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Cms.GetLanguageByNodeId(System.Int32)">
            <summary>
            Gets the language by node id.
            </summary>
            <param name="nodeId">The node id.</param>
            <returns>Returns a node-set of the language by the node id.</returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Cms.GetLanguageIdByNodeId(System.Int32)">
            <summary>
            Gets the language id by node id.
            </summary>
            <param name="nodeId">The node id.</param>
            <returns>Returns the id of the language by the node id.</returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Cms.GetDocumentTypes">
            <summary>
            Returns an XPathNodeIterator of all the document types created in Umbraco.
            </summary>
            <returns>A node-set of all the document types used within Umbraco.</returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Cms.GetDocumentTypes(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns an XPathNodeIterator of all the document types created in Umbraco.
            </summary>
            <param name="includeTabs">Boolean to choose whether to include the (virtual) tabs for the document type.</param>
            <param name="includePropertyTypes">Boolean to choose whether to include the property types for the document type.</param>
            <param name="includeAllowedTemplates">Boolean to choose whether to include the allowed templates for the document type.</param>
            <returns>
            A node-set of all the document types used within Umbraco.
            </returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Cms.GetDocumentType(System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns an XPathNodeIterator of the specified document-type.
            </summary>
            <param name="docTypeId">The document-type id.</param>
            <param name="includeTabs">Boolean to choose whether to include the (virtual) tabs for the document-type.</param>
            <param name="includePropertyTypes">Boolean to choose whether to include the property types for the document-type.</param>
            <param name="includeAllowedTemplates">Boolean to choose whether to include the allowed templates for the document-type.</param>
            <returns>
            A node-set of the specified document-type.
            </returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Cms.GetMediaTypes">
            <summary>
            Returns an XPathNodeIterator of all the media types created in Umbraco.
            </summary>
            <returns>
            A node-set of all the media types used within Umbraco.
            </returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Cms.GetMediaTypes(System.Boolean,System.Boolean)">
            <summary>
            Returns an XPathNodeIterator of all the media types created in Umbraco.
            </summary>
            <param name="includeTabs">Boolean to choose whether to include the (virtual) tabs for the media type.</param>
            <param name="includePropertyTypes">Boolean to choose whether to include the property types for the media type.</param>
            <returns>
            A node-set of all the media types used within Umbraco.
            </returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Cms.GetMediaType(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Returns an XPathNodeIterator of the specified media-type.
            </summary>
            <param name="mediaTypeId">The media-type id.</param>
            <param name="includeTabs">if set to <c>true</c> [include tabs].</param>
            <param name="includePropertyTypes">if set to <c>true</c> [include property types].</param>
            <returns>A node-set of the specified media-type.</returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Cms.GetMemberTypes">
            <summary>
            Returns an XPathNodeIterator of all the member types created in Umbraco.
            </summary>
            <returns>
            A node-set of all the member types used within Umbraco.
            </returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Cms.GetMemberTypes(System.Boolean,System.Boolean)">
            <summary>
            Returns an XPathNodeIterator of all the member types created in Umbraco.
            </summary>
            <param name="includeTabs">Boolean to choose whether to include the (virtual) tabs for the member type.</param>
            <param name="includePropertyTypes">Boolean to choose whether to include the property types for the member type.</param>
            <returns>
            A node-set of all the member types used within Umbraco.
            </returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Cms.GetMemberType(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Returns an XPathNodeIterator of the specified member-type.
            </summary>
            <param name="memberTypeId">The member type id.</param>
            <param name="includeTabs">if set to <c>true</c> [include tabs].</param>
            <param name="includePropertyTypes">if set to <c>true</c> [include property types].</param>
            <returns>A node-set of the specified member-type.</returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Cms.GetMacros">
            <summary>
            Returns an XPathNodeIterator of all the macros created in Umbraco.
            </summary>
            <returns>A node-set of all the macros used within Umbraco.</returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Cms.GetMacro(System.String)">
            <summary>
            Returns an XPathNodeIterator of the specified macro.
            </summary>
            <param name="alias">The alias of the macro.</param>
            <returns>A node-set of the specified macro.</returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Cms.GetDataTypes">
            <summary>
            Returns an XPathNodeIterator of all the data types created in Umbraco.
            </summary>
            <returns>A node-set of all the data types used within Umbraco.</returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Cms.GetDataTypeByGuid(System.String)">
            <summary>
            Returns an XPathNodeIterator of the specified data-type by guid.
            </summary>
            <param name="dataTypeGuid">The guid of the data-type.</param>
            <returns>A node-set of the specified data-type</returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Cms.GetDataTypeById(System.Int32)">
            <summary>
            Returns an XPathNodeIterator of the specified data-type by Id.
            </summary>
            <param name="dataTypeId">The data-type Id.</param>
            <returns>A node-set of the specified data-type</returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Cms.GetPropertyEditors">
            <summary>
            Gets all the property-editors.
            </summary>
            <returns>
            Returns an XML structure of all the property-editors.
            </returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Cms.GetPropertyEditorById(System.String)">
            <summary>
            Gets the property-editor by id.
            </summary>
            <param name="id">The <c>System.Guid</c> id of the property-editor.</param>
            <returns>
            Returns an XML structure of the property-editor.
            </returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Cms.GetTemplates">
            <summary>
            Gets the templates.
            </summary>
            <returns>
            Returns an XML structure of all the templates.
            </returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Cms.GetTemplateAlias(System.Int32)">
            <summary>
            Gets the template alias.
            </summary>
            <param name="templateId">The template id.</param>
            <returns>Returns the alias name of the template.</returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Cms.GetTemplateById(System.Int32)">
            <summary>
            Gets the template by id.
            </summary>
            <param name="templateId">The template id.</param>
            <returns>
            Returns an XML structure of the template.
            </returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Cms.GetTemplateByAlias(System.String)">
            <summary>
            Gets the template by alias.
            </summary>
            <param name="templateAlias">The template alias.</param>
            <returns>
            Returns an XML structure of the template.
            </returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Cms.GetTemplateIdByAlias(System.String)">
            <summary>
            Gets the template id by alias.
            </summary>
            <param name="templateAlias">The template alias.</param>
            <returns>Returns the template id.</returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Cms.GetContentIdByPropertyId(System.Int32)">
            <summary>
            Gets the <c>Content</c> Id by property Id.
            </summary>
            <param name="propertyId">The property Id to get the <c>Content</c> Id.</param>
            <returns>Returns the <c>Content</c> Id.</returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Cms.GetDictionaryItem(System.String,System.Int32)">
            <summary>
            Gets the dictionary item for the specified language id.
            </summary>
            <param name="key">The key for the dictionary item.</param>
            <param name="languageId">The language id.</param>
            <returns>
            Returns the string value of the dictionary item for the specified language id.
            </returns>
            <remarks>
            This is an overloaded method for <c>umbraco.library.GetDictionaryItem(string Key)</c> to accept the language id parameter.
            </remarks>
        </member>
        <member name="M:uComponents.XsltExtensions.Cms.GetDictionaryItem(System.String,System.Int32,System.String)">
            <summary>
            Gets the dictionary item for the specified language id, with a fall-back default value.
            </summary>
            <param name="key">The key.</param>
            <param name="languageId">The language id.</param>
            <param name="defaultValue">The default value.</param>
            <returns>Returns the string value of the dictionary item for the specified language id.</returns>
            <remarks>
            This is an overloaded method for <c>umbraco.library.GetDictionaryItem(string Key)</c> to accept the language id and default value parameters.
            </remarks>
        </member>
        <member name="M:uComponents.XsltExtensions.Cms.GetUniqueId(System.Int32)">
            <summary>
            Gets the unique id of a CMSNode.
            </summary>
            <param name="id">The CMSNode id.</param>
            <returns>Returns the unique id of a CMSNode.</returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Cms.IsLegacyXmlSchema">
            <summary>
            Checks the Umbraco XML Schema version in use
            </summary>
            <returns>
            	<c>true</c> if [is legacy XML schema]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Cms.InPreviewMode">
            <summary>
            Determines whether Umbraco front-end [is in preview mode].
            </summary>
            <returns>
            	<c>true</c> if Umbraco front-end [is in preview mode]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:uComponents.XsltExtensions.Dates">
            <summary>
            The Dates class exposes XSLT extensions to offer extended date/time functionality.
            </summary>
        </member>
        <member name="F:uComponents.XsltExtensions.Dates.DEFAULT_DATE_FORMAT">
            <summary>
            The default DateTime format for uComponents.
            </summary>
        </member>
        <member name="M:uComponents.XsltExtensions.Dates.DateWithinLastDays(System.String,System.Int32)">
            <summary>
            Tests if a date is within the last number of specified days.
            </summary>
            <param name="date">The date.</param>
            <param name="days">The number of days.</param>
            <returns>
            Returns true or false depending on if the date is within the last number of days.
            </returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Dates.DateWithinDuration(System.String,System.String)">
            <summary>
            Tests if a date is within the specified duration.
            </summary>
            <param name="date">The date.</param>
            <param name="duration">The duration (in XSD Duration format).</param>
            <returns>
            Returns true or false depending on if the date is within the specified duration.
            </returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Dates.GetPrettyDate(System.String)">
            <summary>
            Gets the pretty date.
            </summary>
            <param name="date">The date.</param>
            <returns>Returns a pretty date.</returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Dates.GetPrettyDate(System.String,System.String)">
            <summary>
            Gets the pretty date.
            </summary>
            <param name="date">The date.</param>
            <param name="format">The format.</param>
            <returns>Returns a pretty date.</returns>
            <remarks>
            http://dotnetperls.com/pretty-date
            http://ejohn.org/blog/javascript-pretty-date/
            </remarks>
        </member>
        <member name="M:uComponents.XsltExtensions.Dates.FormatDateTime(System.String,System.String)">
            <summary>
             Converts the value of the date time string to its equivalent string representation using the specified format.
            </summary>
            <param name="date">The date string</param>
            <param name="format">The date format</param>
            <returns>The formated date string</returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Dates.ParseExact(System.String,System.String)">
            <summary>
            Parses the exact value of the date time string to its equivalent string representation using the specified format.
            </summary>
            <param name="date">A string that contains a date to convert.</param>
            <param name="inputFormat">A string that defines the required format of the date.</param>
            <returns>
            Returns a sortable date/time formatted to the specified pattern.
            </returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Dates.ParseExact(System.String,System.String,System.String)">
            <summary>
            Parses the exact value of the date time string to its equivalent string representation using the specified format.
            </summary>
            <param name="date">A string that contains a date to convert.</param>
            <param name="inputFormat">A string that defines the required format of the date.</param>
            <param name="outputFormat">The date format for the output.</param>
            <returns>
            Returns a sortable date/time formatted to the specified pattern.
            </returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Dates.ElapsedSeconds(System.String)">
            <summary>
            Gets the elapsed seconds since the input DateTime.
            </summary>
            <param name="input">The input DateTime (as a string).</param>
            <returns>
            Returns the elapsed seconds since the input DateTime.
            </returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Dates.Age(System.String)">
            <summary>
            Get the current age, from the specified date of birth.
            </summary>
            <param name="dateOfBirth">The date of birth.</param>
            <returns>
            Returns the age based on the specified date of birth.
            </returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Dates.IsLeapYear(System.String)">
            <summary>
            Determines whether [is leap year] [the specified date].
            </summary>
            <param name="date">The date.</param>
            <returns>
            	<c>true</c> if [is leap year] [the specified date]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Dates.IsWeekday(System.String)">
            <summary>
            Determines whether the specified date is weekday.
            </summary>
            <param name="date">The date string.</param>
            <returns>
            	<c>true</c> if the specified date is weekday; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Dates.IsWeekend(System.String)">
            <summary>
            Determines whether the specified date is weekend.
            </summary>
            <param name="date">The date string.</param>
            <returns>
            	<c>true</c> if the specified date is weekend; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Dates.AddWorkdays(System.String,System.Int32)">
            <summary>
            Adds the workdays, excluding weekends.
            </summary>
            <param name="date">The date.</param>
            <param name="days">The days.</param>
            <returns></returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Dates.AddWorkdays(System.String,System.Int32,System.String)">
            <summary>
            Adds the workdays, excluding weekends.
            </summary>
            <param name="date">The date.</param>
            <param name="days">The days.</param>
            <param name="format">The format.</param>
            <returns></returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Dates.GetFirstDayOfMonth(System.String)">
            <summary>
            Gets the first day of month.
            </summary>
            <param name="date">The date.</param>
            <returns></returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Dates.GetFirstDayOfMonth(System.String,System.String)">
            <summary>
            Gets the first day of month.
            </summary>
            <param name="date">The date.</param>
            <param name="format">The format.</param>
            <returns></returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Dates.GetLastDayOfMonth(System.String)">
            <summary>
            Gets the last day of month.
            </summary>
            <param name="date">The date  string.</param>
            <returns></returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Dates.GetLastDayOfMonth(System.String,System.String)">
            <summary>
            Gets the last day of month.
            </summary>
            <param name="date">The date string.</param>
            <param name="format">The format.</param>
            <returns></returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Dates.ListDates(System.String,System.String)">
            <summary>
            Lists all the dates between the start and end dates.
            </summary>
            <param name="startDate">The start date.</param>
            <param name="endDate">The end date.</param>
            <returns>Returns a nodeset of all the dates between the start and end date.</returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Dates.ToUnixTime(System.String)">
            <summary>
            Converts a date to Unix time.
            </summary>
            <param name="date">The date string.</param>
            <returns>
            Return the total number of seconds between Unix epoch and the specified date/time.
            </returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Dates.WorkdaysDiff(System.String,System.String)">
            <summary>
            Gets the number of workdays between two dates.
            </summary>
            <param name="startDate">The start date.</param>
            <param name="endDate">The end date.</param>
            <returns>Returns the number of workdays between two dates.</returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Dates.FormatDateTime(System.DateTime,System.String)">
            <summary>
            Formats the date time.
            </summary>
            <param name="date">The date.</param>
            <param name="format">The format.</param>
            <returns></returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Dates.GetDayNumberSuffix(System.DateTime)">
            <summary>
             Gets the ordinal suffix for a given date
            </summary>
            <param name="date">The date</param>
            <returns>The ordinal suffix</returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Dates.IsWeekday(System.DayOfWeek)">
            <summary>
            Determines whether the specified day is weekday.
            </summary>
            <param name="day">The day.</param>
            <returns>
            	<c>true</c> if the specified day is weekday; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Dates.WorkdaysDiff(System.DateTime,System.DateTime)">
            <summary>
            Gets the number of workdays between two dates.
            </summary>
            <param name="startDate">The start date.</param>
            <param name="endDate">The end date.</param>
            <returns>Returns the number of workdays between two dates.</returns>
            <remarks>
            http://www.eggheadcafe.com/community/aspnet/2/44982/how-to-calculate-num-of-weekdays-between-2-dates.aspx#Post45102
            </remarks>
        </member>
        <member name="T:uComponents.XsltExtensions.Email">
            <summary>
            The Email class exposes XSLT extensions to offer extended email functionality.
            </summary>
        </member>
        <member name="M:uComponents.XsltExtensions.Email.IsValidEmail(System.String)">
            <summary>
            Determines whether [is valid email] [the specified input].
            </summary>
            <param name="input">The input.</param>
            <returns>
            	<c>true</c> if [is valid email] [the specified input]; otherwise, <c>false</c>.
            </returns>
            <remarks>http://haacked.com/archive/2007/08/21/i-knew-how-to-validate-an-email-address-until-i.aspx</remarks>
        </member>
        <member name="M:uComponents.XsltExtensions.Email.SendMail(System.String,System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Sends an email. Performs the same function an <c>umbraco.library.SendMail</c>, with the option of sending via SSL.
            </summary>
            <param name="from">The 'from' email address.</param>
            <param name="to">The 'to' email address.</param>
            <param name="subject">The subject of the email.</param>
            <param name="body">The content body of the email.</param>
            <param name="isHtml">If set to <c>true</c>, then content body is HTML, otherwise plain-text.</param>
            <param name="useSSL">If set to <c>true</c>, then use SSL, otherwise use non-secure protocol.</param>
        </member>
        <member name="T:uComponents.XsltExtensions.Exceptions">
            <summary>
            XSLT Extension methods for exceptions.
            </summary>
        </member>
        <member name="M:uComponents.XsltExtensions.Exceptions.ToXml(System.Exception)">
            <summary>
            Returns the Exception message as XML.
            </summary>
            <param name="exception">The exception.</param>
            <returns>An XDocument of the Exception object.</returns>
            <remarks>
            http://stackoverflow.com/questions/486460/how-to-serialize-an-exception-object-in-c
            </remarks>
        </member>
        <member name="M:uComponents.XsltExtensions.Exceptions.ToXPathNodeIterator(System.Exception)">
            <summary>
            Returns the Exception message as a XPathNodeIterator object.
            </summary>
            <param name="exception">The exception.</param>
            <returns>
            An XPathNodeIterator instance of the Exception object.
            </returns>
        </member>
        <member name="T:uComponents.XsltExtensions.IO">
            <summary>
            The IO class exposes XSLT extensions to access data from System.IO.
            </summary>
        </member>
        <member name="M:uComponents.XsltExtensions.IO.DirectoryExists(System.String)">
            <summary>
            Directories the exists.
            </summary>
            <param name="path">The path.</param>
            <returns>Returns true if the directory exists, otherwise false.</returns>
        </member>
        <member name="M:uComponents.XsltExtensions.IO.FileExists(System.String)">
            <summary>
            Files the exists.
            </summary>
            <param name="path">The path.</param>
            <returns>Returns true if the file exists, otherwise false.</returns>
        </member>
        <member name="M:uComponents.XsltExtensions.IO.GetDirectories(System.String,System.String,System.Boolean)">
            <summary>
            Gets the directories.
            </summary>
            <param name="path">The path.</param>
            <param name="searchPattern">The search pattern.</param>
            <param name="allDirectories">if set to <c>true</c> [all directories].</param>
            <returns>Returns a node-set of the directories.</returns>
        </member>
        <member name="M:uComponents.XsltExtensions.IO.GetFiles(System.String,System.String,System.Boolean)">
            <summary>
            Gets the files.
            </summary>
            <param name="path">The path.</param>
            <param name="searchPattern">The search pattern.</param>
            <param name="allDirectories">if set to <c>true</c> [all directories].</param>
            <returns>Returns a node-set of the files.</returns>
        </member>
        <member name="M:uComponents.XsltExtensions.IO.GetExtension(System.String)">
            <summary>
            Gets the extension.
            </summary>
            <param name="path">The file path.</param>
            <returns>Returns the extension of the specified path string.</returns>
        </member>
        <member name="M:uComponents.XsltExtensions.IO.GetFileName(System.String)">
            <summary>
            Gets the name of the file.
            </summary>
            <param name="path">The file path.</param>
            <returns>Returns the file name and extension of the specified path string.</returns>
        </member>
        <member name="M:uComponents.XsltExtensions.IO.GetFileNameWithoutExtension(System.String)">
            <summary>
            Gets the file name without extension.
            </summary>
            <param name="path">The file path.</param>
            <returns>Returns the file name of the specified path string without the extension.</returns>
        </member>
        <member name="M:uComponents.XsltExtensions.IO.GetDirectoryName(System.String)">
            <summary>
            Gets the name of the directory.
            </summary>
            <param name="path">The file path.</param>
            <returns>Returns the directory name for the specified path string.</returns>
        </member>
        <member name="M:uComponents.XsltExtensions.IO.GetFileSize(System.String)">
            <summary>
            Gets the size of the file.
            </summary>
            <param name="path">The path.</param>
            <returns>
            Returns the filesize for the specified filepath.
            </returns>
        </member>
        <member name="M:uComponents.XsltExtensions.IO.GetServerMapPath(System.String)">
            <summary>
            Gets the mapped path to the server.
            </summary>
            <param name="path">The path.</param>
            <returns>Returns the physical file path that corresponds to the specified virtual path on the web server.</returns>
        </member>
        <member name="M:uComponents.XsltExtensions.IO.MapPath(System.String,System.Boolean)">
            <summary>
            Gets the mapped path to the server.
            </summary>
            <param name="path">The path.</param>
            <param name="useHttpContext">if set to <c>true</c> [use HTTP context].</param>
            <returns>Returns the physical file path that corresponds to the specified virtual path on the web server.</returns>
        </member>
        <member name="M:uComponents.XsltExtensions.IO.PathShortener(System.String)">
            <summary>
            Truncates the middle section of a string, this is ideal for long filepaths or URLs.
            </summary>
            <param name="input">The input string.</param>
            <returns>Returns a shortened path of the string.</returns>
        </member>
        <member name="M:uComponents.XsltExtensions.IO.FormatFileSize(System.Int64)">
            <summary>
            Formats the size of the file.
            </summary>
            <param name="filesize">The filesize.</param>
            <returns>The formatted file size.</returns>
            <remarks>
            Refactored [v5.3] to support decimal place (and removes the loop).
            http://stackoverflow.com/a/4975942/12787
            (This passes the tests, but if we run into issues, we'll explore further)
            http://www.somacon.com/p576.php
            </remarks>
        </member>
        <member name="M:uComponents.XsltExtensions.IO.LoadFile(System.String)">
            <summary>
            Loads and reads the contents of a file.
            </summary>
            <param name="filepath">The filepath.</param>
            <returns>
            Returns the contents of the specified file.
            </returns>
        </member>
        <member name="M:uComponents.XsltExtensions.IO.GetFileInfo(System.String)">
            <summary>
            Gets the FileInfo.
            </summary>
            <param name="path">The path.</param>
            <returns>
            Returns the <c>System.IO.FileInfo</c> for the specified filepath.
            </returns>
        </member>
        <member name="M:uComponents.XsltExtensions.IO.GetLocalFilePath(System.String)">
            <summary>
            Checks if the file path is a Uri, then returns the local file path.
            </summary>
            <param name="path">The file path.</param>
            <returns>Returns the local file path.</returns>
        </member>
        <member name="T:uComponents.XsltExtensions.Media">
            <summary>
            The Media class exposes XSLT extensions to access media from Umbraco.
            </summary>
        </member>
        <member name="M:uComponents.XsltExtensions.Media.GetMediaByCsv(System.String)">
            <summary>
            Gets the media by CSV.
            </summary>
            <param name="csv">The CSV of media IDs.</param>
            <returns>
            Returns an XPathNodeIterator of the media nodes from the CSV list.
            </returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Media.GetMediaByCsv(System.String,System.Boolean)">
            <summary>
            Gets the media by CSV.
            </summary>
            <param name="csv">The CSV of media IDs.</param>
            <param name="deep">if set to <c>true</c> [deep].</param>
            <returns>
            Returns an XPathNodeIterator of the media nodes from the CSV list.
            </returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Media.GetMediaByName(System.String)">
            <summary>
            Gets the media item by it's node name.
            </summary>
            <param name="nodeName">Name of the node.</param>
            <returns>
            Returns an XPathNodeIterator of the media nodes from specified node name.
            </returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Media.GetMediaByType(System.String)">
            <summary>
            Gets the media items by node type alias.
            </summary>
            <param name="nodeTypeAlias">The node type alias.</param>
            <returns>
            Returns an XPathNodeIterator of the media nodes from specified node type alias.
            </returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Media.GetMediaByUrlName(System.String)">
            <summary>
            Gets the media items by URL name.
            </summary>
            <param name="urlName">The URL name of the media item.</param>
            <returns>
            Returns an XPathNodeIterator of the media nodes from specified URL name.
            </returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Media.GetMediaByXPath(System.String)">
            <summary>
            Gets the media items by an XPath expression.
            </summary>
            <param name="xpath">The XPath expression.</param>
            <returns>
            Returns an XPathNodeIterator of the media nodes from specified XPath expression.
            </returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Media.GetMediaIdByUrl(System.String)">
            <summary>
            Gets the media Id by URL.
            </summary>
            <param name="url">The URL to get the media id from.</param>
            <returns>Returns the media Id.</returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Media.GetPublishedXml">
            <summary>
            Gets the published Xml.
            </summary>
            <returns>
            Returns an XPathNodeIterator of all the media nodes.
            </returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Media.GetUniqueId(System.Int32)">
            <summary>
            Gets the unique id of a media node.
            </summary>
            <param name="mediaId">The media id.</param>
            <returns>Returns the unique id of a media node.</returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Media.GetImageHtml(System.String)">
            <summary>
            Gets the HTML for an image tag, using the Media Id.
            </summary>
            <param name="mediaId">The media id.</param>
            <returns>
            Returns a HTML image tag from a Media Id.
            </returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Media.GetImageHtml(System.String,System.Int32,System.Int32)">
            <summary>
            Gets the HTML for an image tag, using the Media Id.
            </summary>
            <param name="mediaId">The media id.</param>
            <param name="defaultHeight">The default height.</param>
            <param name="defaultWidth">The default width.</param>
            <returns>Returns a HTML image tag from a Media Id.</returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Media.GetImageHeight(System.String)">
            <summary>
            Gets the height of the image.
            </summary>
            <param name="path">The path of the image.</param>
            <returns>Returns the height of the image.</returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Media.GetImageWidth(System.String)">
            <summary>
            Gets the width of the image.
            </summary>
            <param name="path">The path of the image.</param>
            <returns>Returns the width of the image.</returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Media.GetImageHeightAndWidth(System.String,System.Int32@,System.Int32@)">
            <summary>
            Gets the height and width of the image.
            </summary>
            <param name="path">The path of the image.</param>
            <param name="height">The height.</param>
            <param name="width">The width.</param>
            <returns>
            Returns the height and width of the image.
            </returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Media.GetImageSize(System.String)">
            <summary>
            Gets the size of the image.
            </summary>
            <param name="path">The path of the image.</param>
            <returns>
            Returns the size (dimensions) of the image.
            </returns>
        </member>
        <member name="T:uComponents.XsltExtensions.Members">
            <summary>
            The Members class exposes XSLT extensions to offer extended XML/XSLT functionality.
            </summary>
        </member>
        <member name="M:uComponents.XsltExtensions.Members.GetMembersByCsv(System.String)">
            <summary>
            Gets the members by CSV.
            </summary>
            <param name="csv">The CSV of member IDs.</param>
            <returns>
            Returns an XPathNodeIterator of the member nodes from the CSV list.
            </returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Members.GetMembersByGroupName(System.String)">
            <summary>
            Gets the usernames of all the members in the specified group.
            </summary>
            <param name="groupName">Name of the member group.</param>
            <returns>Returns a list of all the member names.</returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Members.GetMembersByType(System.String)">
            <summary>
            Gets the members by node type alias.
            </summary>
            <param name="nodeTypeAlias">The node type alias.</param>
            <returns>
            Returns an XPathNodeIterator of the member nodes from specified node type alias.
            </returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Members.GetMembersByXPath(System.String)">
            <summary>
            Gets the members by an XPath expression.
            </summary>
            <param name="xpath">The XPath expression.</param>
            <returns>
            Returns an XPathNodeIterator of the member nodes from specified XPath expression.
            </returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Members.GetPublishedXml">
            <summary>
            Gets the published Xml.
            </summary>
            <returns>
            Returns an XPathNodeIterator of all the member nodes.
            </returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Members.GetUniqueId(System.Int32)">
            <summary>
            Gets the unique id of a member node.
            </summary>
            <param name="memberId">The member id.</param>
            <returns>Returns the unique id of a member node.</returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Members.IsMemberOfAGroup(System.String,System.Int32)">
            <summary>
            Checks if a member is member of a specific group.
            </summary>
            <param name="groupName">The name of the group</param>
            <param name="memberId">Member's Id</param>
            <returns>
            Returns true if member is a member of the group.
            </returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Members.GetGroupsByMemberId(System.Int32)">
            <summary>
            Gets a list of group names from the specific member.
            </summary>
            <param name="memberId">Member's Id</param>
            <returns>
            A node-set of all the member-groups from the specific member
            </returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Members.Search(System.String)">
            <summary>
            Performs a basic/quick search against the Examine/Lucene index for Members.
            </summary>
            <param name="searchText">The search text.</param>
            <returns>
            Returns an XML structure of the Members search results.
            </returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Members.Search(System.String,System.Boolean)">
            <summary>
            Performs a basic/quick search against the Examine/Lucene index for Members.
            </summary>
            <param name="searchText">The search text.</param>
            <param name="useWildcards">if set to <c>true</c> [use wildcards].</param>
            <returns>
            Returns an XML structure of the Members search results.
            </returns>
        </member>
        <member name="T:uComponents.XsltExtensions.Nodes">
            <summary>
            The Nodes class exposes XSLT extensions to access nodes from Umbraco.
            </summary>
        </member>
        <member name="M:uComponents.XsltExtensions.Nodes.GetExpireDate(System.Int32)">
            <summary>
            Gets the expiry date of a node.
            </summary>
            <param name="nodeId">The node id.</param>
            <returns>Returns the expiry date of a node.</returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Nodes.GetNodeIdByUrl(System.String)">
            <summary>
            Gets the node Id by URL.
            </summary>
            <param name="url">The URL to get the XML node from.</param>
            <returns>Returns the node Id.</returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Nodes.GetNodeIdByPathLevel(System.String,System.Int32)">
            <summary>
            Gets the node id by path level.
            </summary>
            <param name="path">The path.</param>
            <param name="level">The level.</param>
            <returns>Returns the node id for a given path level.</returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Nodes.GetReleaseDate(System.Int32)">
            <summary>
            Gets the release date of a node.
            </summary>
            <param name="nodeId">The node id.</param>
            <returns>Returns the release date of a node.</returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Nodes.GetUniqueId(System.Int32)">
            <summary>
            Gets the unique id of a node.
            </summary>
            <param name="nodeId">The node id.</param>
            <returns>Returns the unique id of a node.</returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Nodes.GetXmlNodeByCsv(System.String)">
            <summary>
            Gets a list of XML nodes by CSV.
            </summary>
            <param name="csv">The CSV list.</param>
            <returns>
            Returns an XPathNodeIterator of the nodes from the CSV list.
            </returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Nodes.GetXmlNodeByCsv(System.String,System.Boolean)">
            <summary>
            Gets a list of XML nodes by CSV (with an option to persist the order).
            </summary>
            <param name="csv">The CSV of node IDs.</param>
            <param name="persistOrder">if set to <c>true</c> [persist order].</param>
            <returns>
            Returns an XPathNodeIterator of the nodes from the CSV list.
            </returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Nodes.GetXmlNodeByPathLevel(System.String,System.Int32)">
            <summary>
            Gets the XML node by path level.
            </summary>
            <param name="path">The path.</param>
            <param name="level">The level.</param>
            <returns>Returns an XML node by path level.</returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Nodes.GetXmlNodeByUrl(System.String)">
            <summary>
            Gets the XML node by URL.
            </summary>
            <param name="url">The URL to get the XML node from.</param>
            <returns>Returns the XML for the node.</returns>
        </member>
        <member name="T:uComponents.XsltExtensions.Random">
            <summary>
            The Random class exposes XSLT extensions to offer extended randomizing functionality.
            </summary>
        </member>
        <member name="F:uComponents.XsltExtensions.Random.Library">
            <summary>
            Instance of the wrapper for <c>umbraco.library</c>, so we can 'mock' this for unit-testing.
            </summary>
        </member>
        <member name="M:uComponents.XsltExtensions.Random.GetRandomDouble">
            <summary>
            Gets the random double.
            </summary>
            <returns>Returns a random dobule.</returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Random.GetRandomGuid">
            <summary>
            Gets the random GUID.
            </summary>
            <returns>Returns a random GUID.</returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Random.GetRandomGuid(System.String)">
            <summary>
            Gets the random GUID, with a specified format.
            </summary>
            <param name="format">The format.</param>
            <returns>Returns a random GUID, with a specified format.</returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Random.GetRandomItemsFromCsv(System.String,System.Int32)">
            <summary>
            Gets the random items from CSV.
            </summary>
            <param name="csv">The CSV.</param>
            <param name="count">The count.</param>
            <returns>Returns a random selection of items from the original comma-separated values.</returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Random.GetRandomNumber">
            <summary>
            Gets the random number.
            </summary>
            <returns>Returns a random integer.</returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Random.GetRandomNumber(System.Int32)">
            <summary>
            Gets the random number.
            </summary>
            <param name="maximum">The maximum.</param>
            <returns>Returns a random integer, less than specified maximum.</returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Random.GetRandomNumber(System.Int32,System.Int32)">
            <summary>
            Gets the random number.
            </summary>
            <param name="minimum">The minimum.</param>
            <param name="maximum">The maximum.</param>
            <returns>Returns a random integer, between the specified minimum and maximum.</returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Random.GetRandomNumbers(System.Int32)">
            <summary>
            Gets the random numbers.
            </summary>
            <param name="count">The count.</param>
            <returns>Returns a sequence of random numbers.</returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Random.GetRandomNumbers(System.Int32,System.String)">
            <summary>
            Gets the random numbers.
            </summary>
            <param name="count">The count.</param>
            <param name="delimiter">The delimiter.</param>
            <returns>Returns a sequence of random numbers.</returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Random.GetRandomNumbersAsXml(System.Int32)">
            <summary>
            Gets the random numbers as XML.
            </summary>
            <param name="count">The count.</param>
            <returns>Returns a sequence of random numbers as an XML node-set.</returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Random.GetRandomString(System.Int32)">
            <summary>
            Gets the random string.
            </summary>
            <param name="count">The count.</param>
            <returns>Returns a sequence of random characters in a string.</returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Random.GenerateRandomString(System.String,System.String)">
            <summary>
            Generates the random string.
            </summary>
            <param name="pattern">The pattern.</param>
            <param name="replacer">The replacer.</param>
            <returns>Returns the specified pattern with characters replaced with random characters.</returns>
        </member>
        <member name="T:uComponents.XsltExtensions.Request">
            <summary>
            The Request class exposes XSLT extensions to access data from the HttpRequest object.
            </summary>
        </member>
        <member name="M:uComponents.XsltExtensions.Request.ServerVariables">
            <summary>
            Converts the Request.ServerVariables object into a XPathNodeIterator object.
            </summary>
            <returns>Returns a XPathNodeIterator object that represents the Request.ServerVariables object.</returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Request.QueryString">
            <summary>
            Converts the Request.QueryString object into a XPathNodeIterator object.
            </summary>
            <returns>Returns a XPathNodeIterator object that represents the Request.QueryString object.</returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Request.Form">
            <summary>
            Converts the Request.Form object into a XPathNodeIterator object.
            </summary>
            <returns>Returns a XPathNodeIterator object that represents the Request.Form object.</returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Request.Cookies">
            <summary>
            Converts the Request.Cookies object into a XPathNodeIterator object.
            </summary>
            <returns>Returns a XPathNodeIterator object that represents the Request.Cookies object.</returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Request.ConvertNameValueCollectionToXPathNodeIterator(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Iterates over the NameValueCollection, appending each entry to an XmlTextNode.
            </summary>
            <param name="rootName">The name of the root node of the XmlDocument.</param>
            <param name="nvc">The NameValueCollection to be converted.</param>
            <returns>Returns a XPathNodeIterator object that represents the NameValueCollection.</returns>
        </member>
        <member name="T:uComponents.XsltExtensions.Search">
            <summary>
            The Search class exposes XSLT extensions to offer extended Examine/Lucene functionality.
            </summary>
        </member>
        <member name="M:uComponents.XsltExtensions.Search.AdvancedSearch(System.String)">
            <summary>
            Performs an advanced search against an Examine/Lucene index.
            </summary>
            <param name="searchText">The search text.</param>
            <returns>
            Returns an XML structure of the advanced search results.
            </returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Search.AdvancedSearch(System.String,System.Boolean)">
            <summary>
            Performs an advanced search against an Examine/Lucene index.
            </summary>
            <param name="searchText">The search text.</param>
            <param name="useWildcards">if set to <c>true</c> [use wildcards].</param>
            <returns>
            Returns an XML structure of the advanced search results.
            </returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Search.AdvancedSearch(System.String,System.Boolean,System.String)">
            <summary>
            Advanceds the search.
            </summary>
            <param name="searchText">The search text.</param>
            <param name="useWildcards">if set to <c>true</c> [use wildcards].</param>
            <param name="providerName">Name of the provider.</param>
            <returns>
            Returns an XML structure of the advanced search results.
            </returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Search.AdvancedSearch(System.String,System.Boolean,System.String,System.String)">
            <summary>
            Performs an advanced search against an Examine/Lucene index.
            </summary>
            <param name="searchText">The search text.</param>
            <param name="useWildcards">if set to <c>true</c> [use wildcards].</param>
            <param name="providerName">Name of the provider.</param>
            <param name="indexType">Type of the index.</param>
            <returns>
            Returns an XML structure of the advanced search results.
            </returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Search.GetNodeIds(System.String)">
            <summary>
            Gets the node ids.
            </summary>
            <param name="searchText">The search text.</param>
            <returns>
            Returns a CSV of node Ids from a basic/quick search
            </returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Search.GetNodeIds(System.String,System.Boolean)">
            <summary>
            Gets the node ids.
            </summary>
            <param name="searchText">The search text.</param>
            <param name="useWildcards">if set to <c>true</c> [use wildcards].</param>
            <returns>
            Returns a CSV of node Ids from a basic/quick search
            </returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Search.GetNodeIds(System.String,System.Boolean,System.String)">
            <summary>
            Gets the node ids.
            </summary>
            <param name="searchText">The search text.</param>
            <param name="useWildcards">if set to <c>true</c> [use wildcards].</param>
            <param name="providerName">Name of the provider.</param>
            <returns>
            Returns a CSV of node Ids from a basic/quick search
            </returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Search.QuickSearch(System.String)">
            <summary>
            Performs a basic/quick search against an Examine/Lucene index.
            </summary>
            <param name="searchText">The search text.</param>
            <returns>
            Returns an XML structure of the basic/quick search results.
            </returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Search.QuickSearch(System.String,System.Boolean)">
            <summary>
            Performs a basic/quick search against an Examine/Lucene index.
            </summary>
            <param name="searchText">The search text.</param>
            <param name="useWildcards">if set to <c>true</c> [use wildcards].</param>
            <returns>
            Returns an XML structure of the basic/quick search results.
            </returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Search.QuickSearch(System.String,System.Boolean,System.String)">
            <summary>
            Performs a basic/quick search against an Examine/Lucene index.
            </summary>
            <param name="searchText">The search text.</param>
            <param name="useWildcards">if set to <c>true</c> [use wildcards].</param>
            <param name="providerName">Name of the provider.</param>
            <returns>
            Returns an XML structure of the basic/quick search results.
            </returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Search.RawQuery(System.String,System.Boolean,System.String,System.String)">
            <summary>
            Performs a raw query against the specified Examine/Lucene provider.
            </summary>
            <param name="rawQuery">The raw query.</param>
            <param name="useWildcards">if set to <c>true</c> [use wildcards].</param>
            <param name="providerName">Name of the provider.</param>
            <param name="indexType">Type of the index.</param>
            <returns>
            Returns an XML structure of the raw search query results.
            </returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Search.InternalSearch(System.String,System.Boolean,System.String)">
            <summary>
            Perform a search (interally).
            </summary>
            <param name="searchText">The search text.</param>
            <param name="useWildcards">if set to <c>true</c> [use wildcards].</param>
            <param name="providerName">Name of the provider.</param>
            <returns></returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Search.GetResultsAsXml(Examine.ISearchResults)">
            <summary>
            Gets the results as XML.
            </summary>
            <param name="results">The results.</param>
            <returns>
            Returns an XML structure of the search results.
            </returns>
        </member>
        <member name="T:uComponents.XsltExtensions.Strings">
            <summary>
            The Strings class exposes XSLT extensions to offer extended string functionality.
            </summary>
        </member>
        <member name="M:uComponents.XsltExtensions.Strings.GetFirstWords(System.String,System.Int32)">
            <summary>
            Return the first amount of words defined by 'count' contained in 'text'.
            </summary>
            <param name="text">String to work on</param>
            <param name="count">Amount of words to look for</param>
            <returns>
            String containing only the first x words.
            </returns>
            <remarks>Word delimiters are: linefeed, carrige return, tab and space</remarks>
        </member>
        <member name="M:uComponents.XsltExtensions.Strings.GetFirstWords(System.String,System.Int32,System.String)">
            <summary>
            Return the first amount of words defined by 'count' contained in 'text'.
            </summary>
            <param name="text">String to work on</param>
            <param name="count">Amount of words to look for</param>
            <param name="appender">The string to append to the text</param>
            <returns>
            String containing only the first x words.
            </returns>
            <remarks>Word delimiters are: linefeed, carrige return, tab and space</remarks>
        </member>
        <member name="M:uComponents.XsltExtensions.Strings.MakeEmailHyperlink(System.String)">
            <summary>
            Converts an email address into a hyperlink.
            </summary>
            <param name="email">The email address.</param>
            <returns></returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Strings.MakeEmailHyperlink(System.String,System.String)">
            <summary>
            Converts an email address into a hyperlink.
            </summary>
            <param name="email">The email address.</param>
            <param name="text">The text.</param>
            <returns></returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Strings.MakeUrlHyperlink(System.String)">
            <summary>
            Converts all URLs into hyperlinks within a string.
            </summary>
            <param name="input">The input string.</param>
            <returns>Returns a string with all URLs turned into hyperlinks.</returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Strings.PathShortener(System.String)">
            <summary>
            Truncates the middle section of a string, this is ideal for long filepaths or URLs.
            </summary>
            <param name="input">The input string.</param>
            <returns>Returns a shortened path of the string.</returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Strings.TruncateInner(System.String,System.Int32)">
            <summary>
            Truncates the inner-string.
            </summary>
            <param name="input">The input string.</param>
            <param name="maxLength">Maximum lenth of the truncated string.</param>
            <returns>Returns a string with the mid-section truncated.</returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Strings.RemoveChars(System.String)">
            <summary>
            Removes non alpha-numeric characters from a string.
            </summary>
            <param name="input">The input string.</param>
            <returns>Returns the string with non alpha-numeric characters removed.</returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Strings.Reverse(System.String)">
            <summary>
            Reverses the specified input.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Strings.SafeAlias(System.String)">
            <summary>
            Makes an alias name safe to use as an XML element name.
            Removes all spaces and non-alphanumeric characters.
            </summary>
            <param name="input">The input string.</param>
            <returns>Returns a safe alias string.</returns>
            <remarks>This is a wrapper method for <c>umbraco.cms.helpers.Casing.SafeAlias</c>.</remarks>
        </member>
        <member name="M:uComponents.XsltExtensions.Strings.SpaceOutCamelCase(System.String)">
            <summary>
            Spaces out a string on capitals or numbers.
            </summary>
            <param name="input">The input string.</param>
            <returns>
            The string with spaces before each capital letter or number
            </returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Strings.StripFontTags(System.String)">
            <summary>
            Strips the &lt;font&gt; tags from a string.
            </summary>
            <param name="input">The input string.</param>
            <returns>Returns the string stripped of all &lt;font&gt; tags.</returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Strings.StripHTML(System.String)">
            <summary>
            Strips the HTML.
            </summary>
            <param name="input">The input string.</param>
            <returns>Returns the string stripped of all HTML tags.</returns>
            <remarks>
            http://dotnetperls.com/remove-html-tags
            </remarks>
        </member>
        <member name="M:uComponents.XsltExtensions.Strings.StripWhitespace(System.String)">
            <summary>
            Strips the whitespace characters from a string.
            </summary>
            <param name="input">The input string.</param>
            <returns>Returns the string stripped of any whitespace characters.</returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Strings.StripNonAlphaNumeric(System.String)">
            <summary>
            Strips the non alpha-numeric characters.
            </summary>
            <param name="input">The input string.</param>
            <returns>Returns the string with only alpha-numeric characters.</returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Strings.StripLineBreaks(System.String)">
            <summary>
            Strips out all the line-breaks.
            </summary>
            <param name="input">The input string.</param>
            <returns>Returns the string with all the line-breaks stripped out.</returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Strings.ToLowerCase(System.String)">
            <summary>
            Changes the case of the string to lowercase.
            </summary>
            <param name="input">The input string.</param>
            <returns>Returns the string as lowercase.</returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Strings.ToUpperCase(System.String)">
            <summary>
            Changes the case of the string to uppercase.
            </summary>
            <param name="input">The input string.</param>
            <returns>Returns the string as uppercase.</returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Strings.ConvertToCamelCase(System.String)">
            <summary>
            Changes a string to camelCase
            </summary>
            <param name="input">The input string.</param>
            <returns>The camelCased string</returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Strings.ToCamelCase(System.String)">
            <summary>
            Changes a string to camelCase
            </summary>
            <param name="input">The input string.</param>
            <returns>The camelCased string</returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Strings.ToProperCase(System.String)">
            <summary>
            Changes the case of the string to proper case.
            </summary>
            <param name="input">The input string.</param>
            <returns>Returns the string in proper case.</returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Strings.ToTitleCase(System.String)">
            <summary>
            Changes the case of the string to title case.
            </summary>
            <param name="input">The input string.</param>
            <returns>Returns the string in title case.</returns>
            <remarks>This method makes use of the <c>System.Globalization.CultureInfo.InvariantCulture</c> class.</remarks>
        </member>
        <member name="M:uComponents.XsltExtensions.Strings.ToBase64String(System.String)">
            <summary>
            Encodes a string as Base64.
            </summary>
            <param name="input">The input string.</param>
            <returns>Returns the string encoded as Base64.</returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Strings.FromBase64String(System.String)">
            <summary>
            Decodes a string from Base64.
            </summary>
            <param name="input">The input string.</param>
            <returns>Returns the decoded Base64 string.</returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Strings.WordCount(System.String)">
            <summary>
            Counts the number of words in a string.
            </summary>
            <param name="input">The input string.</param>
            <returns>Returns the number of words in the string.</returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Strings.LowerCaseTags(System.String)">
            <summary>
            Lowers the case of the HTML tags.
            </summary>
            <param name="input">The input string.</param>
            <returns>Returns the string with all HTML tags in lowercase.</returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Strings.Coalesce(System.String,System.String)">
            <summary>
            Performs a Coalesce among the supplied arguments.
            </summary>
            <param name="arg1">Argument 1.</param>
            <param name="arg2">Argument 2.</param>
            <returns>Returns the first nonnull or empty expression among the supplied arguments.</returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Strings.Coalesce(System.String,System.String,System.String)">
            <summary>
            Performs a Coalesce among the supplied arguments.
            </summary>
            <param name="arg1">Argument 1.</param>
            <param name="arg2">Argument 2.</param>
            <param name="arg3">Argument 3.</param>
            <returns>Returns the first nonnull or empty expression among the supplied arguments.</returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Strings.Coalesce(System.String,System.String,System.String,System.String)">
            <summary>
            Performs a Coalesce among the supplied arguments.
            </summary>
            <param name="arg1">Argument 1.</param>
            <param name="arg2">Argument 2.</param>
            <param name="arg3">Argument 3.</param>
            <param name="arg4">Argument 4.</param>
            <returns>Returns the first nonnull or empty expression among the supplied arguments.</returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Strings.Coalesce(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Performs a Coalesce among the supplied arguments.
            </summary>
            <param name="arg1">Argument 1.</param>
            <param name="arg2">Argument 2.</param>
            <param name="arg3">Argument 3.</param>
            <param name="arg4">Argument 4.</param>
            <param name="arg5">Argument 5.</param>
            <returns>Returns the first nonnull or empty expression among the supplied arguments.</returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Strings.Format(System.String,System.String)">
            <summary>
            Formats the specified string.
            </summary>
            <param name="format">The format.</param>
            <param name="arg1">Argument 1.</param>
            <returns>Returns a formatted string.</returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Strings.Format(System.String,System.String,System.String)">
            <summary>
            Formats the specified string.
            </summary>
            <param name="format">The format.</param>
            <param name="arg1">Argument 1.</param>
            <param name="arg2">Argument 2.</param>
            <returns>Returns a formatted string.</returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Strings.Format(System.String,System.String,System.String,System.String)">
            <summary>
            Formats the specified string.
            </summary>
            <param name="format">The format.</param>
            <param name="arg1">Argument 1.</param>
            <param name="arg2">Argument 2.</param>
            <param name="arg3">Argument 3.</param>
            <returns>Returns a formatted string.</returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Strings.Format(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Formats the specified string.
            </summary>
            <param name="format">The format.</param>
            <param name="arg1">Argument 1.</param>
            <param name="arg2">Argument 2.</param>
            <param name="arg3">Argument 3.</param>
            <param name="arg4">Argument 4.</param>
            <returns>Returns a formatted string.</returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Strings.Format(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Formats the specified string.
            </summary>
            <param name="format">The format.</param>
            <param name="arg1">Argument 1.</param>
            <param name="arg2">Argument 2.</param>
            <param name="arg3">Argument 3.</param>
            <param name="arg4">Argument 4.</param>
            <param name="arg5">Argument 5.</param>
            <returns>Returns a formatted string.</returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Strings.Concat(System.Xml.XPath.XPathNodeIterator,System.String)">
            <summary>
            Concats the specified nodeset.
            </summary>
            <param name="nodeset">The nodeset.</param>
            <param name="separator">The separator.</param>
            <returns></returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Strings.RemoveDuplicateEntries(System.String)">
            <summary>
            Removes the duplicate entries from a comma-separated list.
            </summary>
            <param name="list">The comma-separated list.</param>
            <returns>
            Returns a comma-separated list with duplicate entries removed.
            </returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Strings.RemoveDuplicateEntries(System.String,System.String)">
            <summary>
            Removes the duplicate entries from a comma-separated list.
            </summary>
            <param name="list">The comma-separated list.</param>
            <param name="separator">The separator.</param>
            <returns>
            Returns a comma-separated list with duplicate entries removed.
            </returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Strings.RemoveDuplicateEntries(System.String,System.Char[])">
            <summary>
            Removes the duplicate entries from a delimited list.
            </summary>
            <param name="list">The delimited list.</param>
            <param name="separators">The separators.</param>
            <returns>Returns a delimited list with duplicate entries removed.</returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Strings.RemoveEmptyEntries(System.String)">
            <summary>
            Removes the empty entries from a comma-separated list.
            </summary>
            <param name="list">The comma-separated list.</param>
            <returns>
            Returns a comma-separated list with empty entries removed.
            </returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Strings.RemoveEmptyEntries(System.String,System.String)">
            <summary>
            Removes the empty entries from a comma-separated list.
            </summary>
            <param name="list">The comma-separated list.</param>
            <param name="separator">The separator.</param>
            <returns>
            Returns a comma-separated list with empty entries removed.
            </returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Strings.RemoveEmptyEntries(System.String,System.Char[])">
            <summary>
            Removes the empty entries from a delimited list.
            </summary>
            <param name="list">The delimited list.</param>
            <param name="separators">The separators.</param>
            <returns>Returns a the delimited list with the empty entries removed.</returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Strings.SingularPlural(System.Int32,System.String,System.String)">
            <summary>
            Selects a singular or plural word based on the value of the count.
            </summary>
            <param name="count">The count.</param>
            <param name="singular">The singular word.</param>
            <param name="plural">The plural word.</param>
            <returns>
            Returns the singular or plural word based on the count's value.
            </returns>
            <remarks>
            If the count value is one, then the singluar word is returned, otherwise the plural is returned.
            </remarks>
        </member>
        <member name="M:uComponents.XsltExtensions.Strings.SingularPlural(System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            Selects a singular or plural word based on the value of the count.
            </summary>
            <param name="count">The count.</param>
            <param name="singular">The singular word.</param>
            <param name="plural">The plural word.</param>
            <param name="prefixCount">if set to <c>true</c> [prefix count].</param>
            <remarks>
            If the count value is one, then the singluar word is returned, otherwise the plural is returned.
            </remarks>
        </member>
        <member name="M:uComponents.XsltExtensions.Strings.TrimStringFromStart(System.String,System.String)">
            <summary>
            Removes the specified string from the beginning of the target, if it exists.
            </summary>
            <param name="input">The input.</param>
            <param name="textToTrim">The text to trim.</param>
            <returns>
            Returns the input string with the specified text trimmed from the start.
            </returns>
            <remarks>
            Thanks to Tom Fulton http://our.umbraco.org/member/7606
            </remarks>
        </member>
        <member name="M:uComponents.XsltExtensions.Strings.TrimStringFromEnd(System.String,System.String)">
            <summary>
            Removes the specified string from the end of the target, if it exists.
            </summary>
            <param name="input">The input.</param>
            <param name="textToTrim">The text to trim.</param>
            <returns>
            Returns the input string with the specified text trimmed from the end.
            </returns>
            <remarks>
            Thanks to Tom Fulton http://our.umbraco.org/member/7606
            </remarks>
        </member>
        <member name="M:uComponents.XsltExtensions.Strings.CharLoop(System.String,uComponents.XsltExtensions.Strings.CharCondition)">
            <summary>
            Loops through each of the characters in the string.
            </summary>
            <param name="input">The input string.</param>
            <param name="condition">The character condition.</param>
            <returns>Returns a string that has been passed through the character condition filtered.</returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Strings.Coalesce(System.String[])">
            <summary>
            Performs a Coalesce among the supplied arguments.
            </summary>
            <param name="args">The arguments.</param>
            <returns>Returns the first nonnull or empty expression among the supplied arguments.</returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Strings.FormatString(System.String,System.String[])">
            <summary>
            Formats the specified string.
            </summary>
            <param name="format">The format string.</param>
            <param name="args">The arguments.</param>
            <returns>Returns a formatted string.</returns>
        </member>
        <member name="T:uComponents.XsltExtensions.Strings.CharCondition">
            <summary>
            A delegate for the character condition.
            </summary>
            <param name="c">The character.</param>
            <returns>A boolean of the condition of the character.</returns>
        </member>
        <member name="T:uComponents.XsltExtensions.Urls">
            <summary>
            The Urls class exposes XSLT extensions to create and modify Urls.
            </summary>
        </member>
        <member name="F:uComponents.XsltExtensions.Urls.Library">
            <summary>
            Instance of the wrapper for <c>umbraco.library</c>, so we can 'mock' this for unit-testing.
            </summary>
        </member>
        <member name="M:uComponents.XsltExtensions.Urls.AddAltTemplate(System.String,System.String)">
            <summary>
            Appends the alternative template to the url as if it was a folder instead of a querystring. Is "use directory urls" aware if set.
            </summary>
            <param name="url">The url to the content</param>
            <param name="altTemplateAlias">The name of the alternative template to use</param>
            <returns>Complete url with alt template merged in.</returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Urls.AddAltTemplate(System.String,System.String,System.Boolean)">
            <summary>
            Appends the alternative template to the url as a querystring or folder instead of a querystring. Is "use directory urls" aware if set.
            </summary>
            <param name="url">The url to the content</param>
            <param name="altTemplateAlias">The name of the alternative template to use</param>
            <param name="useQueryString">Should the alttemplate be added as a folder or querystring?</param>
            <returns>Complete url with alt template merged in.</returns>
            <remarks>Intended for use in our unit tests but here if you need it</remarks>
        </member>
        <member name="M:uComponents.XsltExtensions.Urls.AddAltTemplate(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Appends the alternative template to the url as a querystring or folder instead of a querystring. Is "use directory urls" aware if set.
            </summary>
            <param name="url">The url to the content</param>
            <param name="altTemplateAlias">The name of the alternative template to use</param>
            <param name="useQueryString">Should the alttemplate be added as a folder or querystring?</param>
            <param name="useDirectoryUrls">Should we render out with a .aspx extension or just a trailing slash?</param>
            <returns>Complete url with alt template merged in.</returns>
            <remarks>Intended for use in our unit tests but here if you need it</remarks>
        </member>
        <member name="M:uComponents.XsltExtensions.Urls.AppendOrUpdateQueryString(System.String,System.String)">
            <summary>
            Appends or updates a query string value to the current Url
            </summary>
            <param name="key">The query string key</param>
            <param name="value">The query string value</param>
            <returns>The updated Url</returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Urls.AppendOrUpdateQueryString(System.String,System.String,System.String)">
            <summary>
            Appends or updates a query string value to supplied Url
            </summary>
            <param name="url">The Url to update</param>
            <param name="key">The query string key</param>
            <param name="value">The query string value</param>
            <returns>The updated Url</returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Urls.ConcatAsUrl(System.String,System.String)">
            <summary>
            Used to stitch different segments (folders) of a url together. Handles if a slash is needed between the two strings even if one might exist on one of the strings already. Greatly simplified your XSLT logic.
            </summary>
            <param name="part1">The left part of the url to concat to</param>
            <param name="part2">The right part of the url to concat on</param>
            <returns>String of the full url represented by concating the two strings together using the default slash divider</returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Urls.ConcatAsUrl(System.String,System.String,System.Char)">
            <summary>
            Used to stitch different segments (folders) of a url together. Handles if a slash is needed between the two strings even if one might exist on one of the strings already. Greatly simplified your XSLT logic.
            </summary>
            <param name="part1">The left part of the url to concat to</param>
            <param name="part2">The right part of the url to concat on</param>
            <param name="divider">A char character to use as the divider</param>
            <returns>String of the full url represented by concating the two strings together</returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Urls.FormatUrl(System.String)">
            <summary>
            Formats the URL - replacing characters in the string to make a 'safe' URL.
            </summary>
            <param name="input">The input URL.</param>
            <returns>Returns a 'safe' URL, removing illegal characters.</returns>
            <remarks>This method is a wrapper for <c>umbraco.cms.helpers.url.FormatUrl</c>.</remarks>
        </member>
        <member name="M:uComponents.XsltExtensions.Urls.NiceUrl(System.Int32)">
            <summary>
            Returns a nicely formated Url for a given node.
            </summary>
            <param name="nodeId">The node id.</param>
            <returns>The NiceUrl for the node id.</returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Urls.NiceUrl(System.Int32,System.String)">
            <summary>
            Returns a nicely formated Url for a given node and alternative template setting appended as a querystring.
            </summary>
            <param name="nodeId">The node id.</param>
            <param name="altTemplateAlias">The alias of the alternative template.</param>
            <returns>The NiceUrl for the node id.</returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Urls.NiceUrl(System.Int32,System.String,System.Boolean)">
            <summary>
            Returns a nicely formated Url for a given node and alternative template.
            </summary>
            <param name="nodeId">The node id.</param>
            <param name="altTemplateAlias">The alias of the alternative template.</param>
            <param name="useQueryString">Boolean to choose whether the append alternative template as a querystring parameter.</param>
            <returns>The NiceUrl for the node id.</returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Urls.GetHostName(System.Int32)">
            <summary>
            Gets the hostname of the node Id.
            </summary>
            <param name="nodeId">The node Id.</param>
            <returns>Returns the hostname for the node Id.</returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Urls.GetNodeIdByUrl(System.String)">
            <summary>
            Gets the node Id by URL.
            </summary>
            <param name="url">The URL to get the XML node from.</param>
            <returns>Returns the node Id.</returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Urls.GetTextByUrl(System.String)">
            <summary>
            Gets the text by URL.
            </summary>
            <param name="url">The URL.</param>
            <returns>Returns the text (<c>System.String</c>) from a given URL.</returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Urls.GetXmlNodeByUrl(System.String)">
            <summary>
            Gets the XML node by URL.
            </summary>
            <param name="url">The URL to get the XML node from.</param>
            <returns>Returns the XML for the node.</returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Urls.GuessNiceUrl(System.Int32)">
            <summary>
            Guesses the NiceUrl based on the node id.
            </summary>
            <param name="nodeId">The node id.</param>
            <returns>Returns a guestimate of the NiceUrl for a node id.</returns>
            <remarks>
            GuessNiceUrl is not very performant when attempting to guess the URL for unpublished nodes.
            Do not over-use this method. It makes many database calls and will be slow!
            </remarks>
        </member>
        <member name="M:uComponents.XsltExtensions.Urls.ConstructQueryString(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Constructs a NameValueCollection into a query string. Assumes delimiter is "&amp;" and will ommit keys with empty/null values
            </summary>
            <remarks>Consider this method to be the opposite of "System.Web.HttpUtility.ParseQueryString"</remarks>
            <param name="parameters">The NameValueCollection</param>
            <returns>A key/value structured query string, delimited by the specified String</returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Urls.ConstructQueryString(System.Collections.Specialized.NameValueCollection,System.Boolean)">
            <summary>
            Constructs a NameValueCollection into a query string. Assumes delimiter is "&amp;".
            </summary>
            <remarks>Consider this method to be the opposite of "System.Web.HttpUtility.ParseQueryString"</remarks>
            <param name="parameters">The NameValueCollection</param>
            <param name="omitEmpty">Boolean to chose whether to omit empty values</param>
            <returns>A key/value structured query string, delimited by the specified String</returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Urls.ConstructQueryString(System.Collections.Specialized.NameValueCollection,System.String,System.Boolean)">
            <summary>
            Constructs a NameValueCollection into a query string.
            </summary>
            <remarks>Consider this method to be the opposite of "System.Web.HttpUtility.ParseQueryString"</remarks>
            <param name="parameters">The NameValueCollection</param>
            <param name="delimiter">The String to delimit the key/value pairs</param>
            <param name="omitEmpty">Boolean to chose whether to omit empty values</param>
            <returns>A key/value structured query string, delimited by the specified String</returns>
            <example>
            http://blog.leekelleher.com/2009/09/19/how-to-convert-namevaluecollection-to-a-query-string-revised/
            </example>
        </member>
        <member name="M:uComponents.XsltExtensions.Urls.GetNiceUrl(System.Int32)">
            <summary>
            Gets the NiceUrl.
            </summary>
            <param name="nodeId">The node id.</param>
            <returns>Returns the NiceUrl for the node id.</returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Urls.OnBeforeNiceUrlGenerated(System.Int32@)">
            <summary>
            Dispatches a BeforeNiceUrlGenerated event.
            </summary>
            <param name="nodeId">The node id</param>
        </member>
        <member name="M:uComponents.XsltExtensions.Urls.OnAfterNiceUrlGenerated(System.Int32@,System.String@)">
            <summary>
            Dispatches an AfterNiceUrlGenerated event.
            </summary>
            <param name="nodeId">The node id</param>
            <param name="url">The generated url</param>
        </member>
        <member name="E:uComponents.XsltExtensions.Urls.BeforeNiceUrlGenerated">
            <summary>
            Before NiceUrl generated event
            </summary>
        </member>
        <member name="E:uComponents.XsltExtensions.Urls.AfterNiceUrlGenerated">
            <summary>
            After NiceUrl generated event
            </summary>
        </member>
        <member name="T:uComponents.XsltExtensions.Urls.BeforeNiceUrlGeneratedEventHandler">
            <summary>
            Before NiceUrl generated event handler delegate
            </summary>
            <param name="nodeId">The node id</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="T:uComponents.XsltExtensions.Urls.AfterNiceUrlGeneratedEventHandler">
            <summary>
            After NiceUrl generated event handler delegate
            </summary>
            <param name="nodeId">The node id</param>
            <param name="url">The generated url</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="T:uComponents.XsltExtensions.Xml">
            <summary>
            The Xml class exposes XSLT extensions to offer extended XML/XSLT functionality.
            </summary>
        </member>
        <member name="M:uComponents.XsltExtensions.Xml.FilterNodes(System.Xml.XPath.XPathNodeIterator,System.String)">
            <summary>
            Filters the node-set with the specified XPath.
            </summary>
            <param name="nodeset">The nodeset.</param>
            <param name="xpath">The XPath expression.</param>
            <returns>
            Returns an XPathNodeIterator of the filtered node-set.
            </returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Xml.GetXmlDocument(System.String,System.Boolean,System.Int32)">
            <summary>
            Gets the XML document.
            </summary>
            <param name="path">The path.</param>
            <param name="relative">if set to <c>true</c> [relative].</param>
            <param name="cacheInSeconds">The cache in seconds.</param>
            <returns></returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Xml.GetXmlDocumentByUrl(System.String,System.Int32,System.Boolean)">
            <summary>
            Gets the XML document by URL.
            </summary>
            <param name="url">The URL.</param>
            <param name="cacheInSeconds">The cache in seconds.</param>
            <param name="isGzipped">if set to <c>true</c> [is gzipped].</param>
            <returns></returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Xml.Parse(System.String)">
            <summary>
            Parses the specified XML string.
            </summary>
            <param name="xml">The XML string.</param>
            <returns>
            Returns an XPathNodeIterator of the XML string.
            </returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Xml.ParseXml(System.String,System.String)">
            <summary>
            Parses the specified XML string.
            </summary>
            <param name="xml">The XML string.</param>
            <param name="xpath">The XPath expression for the navigator selection.</param>
            <returns>
            Returns an XPathNodeIterator of the XML string.
            </returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Xml.ParseXhtml(System.String)">
            <summary>
            Parses the specified XHTML string.
            </summary>
            <param name="xhtml">The XHTML string.</param>
            <returns>Returns an XPathNodeIterator of the XHTML string.</returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Xml.RandomChildNode(System.Xml.XPath.XPathNavigator)">
            <summary>
            Returns a random child node from the parent node.
            </summary>
            <param name="node">The (parent) node.</param>
            <returns>
            Returns an XPathNodeIterator of a random child node from the parent node.
            </returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Xml.RandomNode(System.Xml.XPath.XPathNodeIterator)">
            <summary>
            Returns a random node from the node-set.
            </summary>
            <param name="nodeset">The node-set.</param>
            <returns>
            Returns an <c>System.Xml.XPath.XPathNodeIterator</c> of a random node from the node-set.
            </returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Xml.RandomSort(System.Xml.XPath.XPathNavigator)">
            <summary>
            Randomizes the sort order of the specified nodeset.
            </summary>
            <param name="node">The (parent) node.</param>
            <returns>
            Returns the nodeset with a random sort order.
            </returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Xml.RandomSort(System.Xml.XPath.XPathNavigator,System.Int32)">
            <summary>
            Randomizes the sort order of the specified nodeset, limited to a specified number.
            </summary>
            <param name="node">The (parent) node.</param>
            <param name="count">The count.</param>
            <returns>
            Returns the nodeset with a random sort order.
            </returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Xml.Split(System.String)">
            <summary>
            Splits the specified delimited string into an XPathNodeIterator.
            </summary>
            <param name="data">The delimited string data.</param>
            <returns>Returns an <c>System.Xml.XPath.XPathNodeIterator</c> representation of the delimited string data.</returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Xml.Split(System.String,System.String)">
            <summary>
            Splits the specified delimited string into an XPathNodeIterator.
            </summary>
            <param name="data">The delimited string data.</param>
            <param name="separator">The separator.</param>
            <returns>Returns an <c>System.Xml.XPath.XPathNodeIterator</c> representation of the delimited string data.</returns>
        </member>
        <member name="M:uComponents.XsltExtensions.Xml.Split(System.String,System.String,System.String,System.String)">
            <summary>
            Splits the specified delimited string into an XPathNodeIterator.
            </summary>
            <param name="data">The delimited string data.</param>
            <param name="separator">The separator.</param>
            <param name="rootName">Name of the root node.</param>
            <param name="elementName">Name of the element node.</param>
            <returns>Returns an <c>System.Xml.XPath.XPathNodeIterator</c> representation of the delimited string data.</returns>
        </member>
    </members>
</doc>
